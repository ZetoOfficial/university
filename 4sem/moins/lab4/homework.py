def perceptron(sensor, weights, bias):
    s = 0
    for col in range(len(sensor)):
        for i in range(len(sensor[col])):
            s += int(sensor[col][i]) * weights[col][i]
    if s >= bias:
        return 1
    else:
        return 0


def is_digit(sensor):
    digit_weights = [
        [
            [1, 1, 1],
            [1, -1, 1],
            [1, -1, 1],
            [1, -1, 1],
            [1, 1, 1],
        ],
        [
            [-1, -1, 1],
            [-1, 1, 1],
            [-1, -1, 1],
            [-1, -1, 1],
            [1, 1, 1],
        ],
        [
            [1, 1, 1],
            [-1, -1, 1],
            [1, 1, 1],
            [1, -1, -1],
            [1, 1, 1],
        ],
        [
            [1, 1, 1],
            [-1, -1, 1],
            [1, 1, 1],
            [-1, -1, 1],
            [1, 1, 1],
        ],
        [
            [1, -1, 1],
            [1, -1, 1],
            [1, 1, 1],
            [-1, -1, 1],
            [-1, -1, 1],
        ],
        [
            [1, 1, 1],
            [1, -1, -1],
            [1, 1, 1],
            [-1, -1, 1],
            [1, 1, 1],
        ],
        [
            [1, 1, 1],
            [1, -1, -1],
            [1, 1, 1],
            [1, -1, 1],
            [1, 1, 1],
        ],
        [
            [1, 1, 1],
            [-1, -1, 1],
            [-1, -1, 1],
            [-1, -1, 1],
            [-1, -1, 1],
        ],
        [
            [1, 1, 1],
            [1, -1, 1],
            [1, 1, 1],
            [1, -1, 1],
            [1, 1, 1],
        ],
        [
            [1, 1, 1],
            [1, -1, 1],
            [1, 1, 1],
            [-1, -1, 1],
            [1, 1, 1],
        ],
    ]
    digit_biases = [-3.5, -1.5, -1.5, -2.5, -2.5, -2.5, -2.5, -2.5, -2.5, -2.5]
    for i in range(10):
        if perceptron(sensor, digit_weights[i], digit_biases[i]) == 1:
            print(f'is {i}')
    return -1


digits = [
    [
        [1, 1, 1],
        [1, 0, 1],
        [1, 0, 1],
        [1, 0, 1],
        [1, 1, 1],
    ],
    [
        [0, 0, 1],
        [0, 1, 1],
        [0, 0, 1],
        [0, 0, 1],
        [1, 1, 1],
    ],
    [
        [1, 1, 1],
        [0, 0, 1],
        [1, 1, 1],
        [1, 0, 0],
        [1, 1, 1],
    ],
    [
        [1, 1, 1],
        [0, 0, 1],
        [1, 1, 1],
        [0, 0, 1],
        [1, 1, 1],
    ],
    [
        [1, 0, 1],
        [1, 0, 1],
        [1, 1, 1],
        [0, 0, 1],
        [0, 0, 1],
    ],
    [
        [1, 1, 1],
        [1, 0, 0],
        [1, 1, 1],
        [0, 0, 1],
        [1, 1, 1],
    ],
    [
        [1, 1, 1],
        [1, 0, 0],
        [1, 1, 1],
        [1, 0, 1],
        [1, 1, 1],
    ],
    [
        [1, 1, 1],
        [0, 0, 1],
        [0, 0, 1],
        [0, 0, 1],
        [0, 0, 1],
    ],
    [
        [1, 1, 1],
        [1, 0, 1],
        [1, 1, 1],
        [1, 0, 1],
        [1, 1, 1],
    ],
    [
        [1, 1, 1],
        [1, 0, 1],
        [1, 1, 1],
        [0, 0, 1],
        [1, 1, 1],
    ],
]

for digit in digits:
    print(is_digit(digit))
